# {{ project_name }}

这是一个使用Electron和Python开发的跨平台桌面应用程序。

## 项目结构

```
{{ project_name }}/
├── package.json           # Electron应用配置
├── main.js                # Electron主进程
├── preload.js             # Electron预加载脚本
├── renderer/              # Electron渲染进程文件
│   ├── index.html
│   ├── index.js
│   └── styles.css
├── python/                # Python引擎代码
│   ├── main.py            # Python主入口
│   ├── requirements.txt   # Python依赖
│   └── src/               # Python源代码
│       └── ...
└── build/                 # 构建输出目录
    ├── python/            # Python打包输出
    └── electron/          # Electron打包输出
```

## 开发环境设置

### 安装依赖

```bash
# 安装Node.js依赖
npm install

# 安装Python依赖
cd python
pip install -r requirements.txt
cd ..
```

### 运行开发环境

```bash
npm start
```

## 打包应用

### 打包Python引擎

```bash
npm run build:python
```

### 打包完整应用

```bash
npm run build:all
```

### 生成特定平台的安装包

```bash
# Windows
npm run build:win

# macOS
npm run build:mac

# Linux
npm run build:linux
```

## 常见问题

### 找不到模块错误

如果在运行打包后的应用时遇到 "ModuleNotFoundError: No module named 'xxx'" 类似的错误：

1. 确保所有依赖都已安装：
   ```bash
   cd python
   pip install -r requirements.txt
   ```

2. 尝试使用调试模式重新创建项目：
   ```bash
   projects electron-python 项目名称 --debug-mode
   ```
   这将在打包时启用控制台，便于查看错误信息。

3. 如果仍然存在问题，可以手动修改 `python/main.spec` 文件，在 `hiddenimports` 列表中添加缺失的模块。

### 打包过程中的问题

1. 确保已安装最新版本的 PyInstaller：
   ```bash
   pip install --upgrade pyinstaller
   ```

2. 在打包前清理旧的构建文件：
   ```bash
   rm -rf build/python/build
   ```

3. 使用详细模式查看打包日志：
   ```bash
   cd python && pyinstaller main.spec -v --distpath ../build/python --workpath ../build/python/build --clean
   ```

请参阅项目文档或项目问题跟踪器。 